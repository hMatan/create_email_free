pipeline {
    agent any
    
    // Schedule the pipeline to run every 3 days
    triggers {
        cron('H H */3 * *')  // Runs every 3 days
    }
    
    environment {
        // Define workspace paths
        PYTHON_PATH = '/usr/bin/python3'
        WORKSPACE_DIR = "${WORKSPACE}"
        
        // Email configuration
        EMAIL_RECIPIENTS = 'matan@yahoo.com'
        GMAIL_SENDER = 'your-jenkins-email@gmail.com'    // ◊¶◊®◊ô◊ö ◊ú◊î◊ó◊ú◊ô◊£
        GMAIL_APP_PASSWORD = 'your-16-char-app-password'  // ◊¶◊®◊ô◊ö ◊ú◊î◊ó◊ú◊ô◊£
        
        // Temp email configuration
        TEMP_EMAIL_FILE = 'email_info.txt'
        MESSAGE_IDS_FILE = 'message_ids.txt'
        SIGNUP_FILE = 'signup_info.json'
        ACTIVATION_FILE = 'activation_info.json'
        USER_CREDENTIALS_FILE = 'user.password.txt'
        EMAIL_LOG_FILE = 'email_sent.json'
        
        // Archive paths for artifacts
        ARTIFACTS_PATTERN = '*.txt,*.json,message_details_*.json,signup_*.json,activation_*.json,user.password.txt,email_sent.json'
    }
    
    options {
        // Keep builds for 30 days or max 50 builds
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '50'))
        
        // Set build timeout to 45 minutes (increased for activation step)
        timeout(time: 45, unit: 'MINUTES')
        
        // Disable concurrent builds
        disableConcurrentBuilds()
        
        // Add timestamps to console output
        timestamps()
    }
    
    stages {
        { stage('üßπ Fresh Start Cleanup') {
    steps {
        script {
            echo "üßπ Ensuring fresh start by removing all generated files"
            echo "üîÑ This guarantees no interference from previous runs"
        }
        
        sh '''
            echo "üóëÔ∏è COMPLETE CLEANUP - Removing ALL generated files..."
            
            # Show what exists before cleanup
            echo "üìã Files before cleanup:"
            ls -la
            echo ""
            
            # Remove everything generated by pipeline
            echo "üîÑ Removing pipeline artifacts..."
            
            # Remove files with error handling
            rm -f email_info.txt message_ids.txt message_details_*.json 2>/dev/null || true
            rm -f signup_info.json signup_*.json signup_*.png 2>/dev/null || true  
            rm -f activation_info.json activation_*.json activation_*.png 2>/dev/null || true
            rm -f user.password.txt email_sent.json 2>/dev/null || true
            rm -f *.png *.log get-pip.py 2>/dev/null || true
            rm -f build_*_summary_*.txt complete_pipeline_summary_*.txt 2>/dev/null || true
            
            # Remove Python cache
            find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
            find . -name "*.pyc" -delete 2>/dev/null || true
            
            # Remove temporary directories
            rm -rf chrome_*_profile/ firefox_*_profile/ 2>/dev/null || true
            
            echo "‚úÖ Cleanup completed!"
            echo ""
            echo "üìÅ Files after cleanup (should only show source .py files):"
            ls -la
            echo ""
            
            # Verify clean state
            GENERATED_FILES=$(ls -1 *.txt *.json *.png 2>/dev/null | grep -v -E '\\.(py)$' | wc -l || echo 0)
            if [ "$GENERATED_FILES" -eq 0 ]; then
                echo "üéâ Perfect! Workspace is completely clean"
            else
                echo "‚ö†Ô∏è Some generated files still exist"
            fi
        '''
    }
}

    {
        stage('Setup Environment') {
            steps {
                script {
                    echo "üöÄ Starting Complete Email & Signup & Activation & Email Pipeline"
                    echo "üìÖ Build Date: ${new Date()}"
                    echo "üî¢ Build Number: ${BUILD_NUMBER}"
                    echo "üìÇ Workspace: ${WORKSPACE_DIR}"
                    echo "üê≥ Running in Jenkins Docker container"
                }
                
                // Clean up old files from previous runs
                sh '''
                    echo "üßπ Cleaning up old files (older than 2 hours)..."
                    
                    # Delete old summary files
                    find . -name "complete_pipeline_summary_*.txt" -mmin +120 -delete || true
                    find . -name "build_*_summary_*.txt" -mmin +120 -delete || true
                    
                    # Delete old signup files
                    find . -name "signup_*.json" -mmin +120 -delete || true
                    find . -name "signup_*.png" -mmin +120 -delete || true
                    
                    # Delete old activation files
                    find . -name "activation_*.json" -mmin +120 -delete || true
                    find . -name "activation_*.png" -mmin +120 -delete || true
                    
                    # Delete old credentials files
                    find . -name "user.password.txt" -mmin +120 -delete || true
                    find . -name "email_sent.json" -mmin +120 -delete || true
                    
                    # Delete old message details files
                    find . -name "message_details_*.json" -mmin +120 -delete || true
                    
                    # Delete old screenshots
                    find . -name "*.png" -mmin +120 -delete || true
                    
                    # Delete old log files
                    find . -name "*.log" -mmin +120 -delete || true
                    
                    echo "‚úÖ Old files cleaned"
                    echo "üìÅ Current files:"
                    ls -la *.txt *.json *.png 2>/dev/null || echo "No artifacts yet - starting fresh"
                '''
            }
        }
        
        stage('Check Python Scripts') {
            steps {
                script {
                    echo "üìã Checking if Python scripts exist..."
                }
                
                sh '''
                    if [ ! -f "create_email.py" ]; then
                        echo "‚ùå create_email.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "check_messages.py" ]; then
                        echo "‚ùå check_messages.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "get_message_details.py" ]; then
                        echo "‚ùå get_message_details.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "website_signup.py" ]; then
                        echo "‚ùå website_signup.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "activate_account.py" ]; then
                        echo "‚ùå activate_account.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "send_email.py" ]; then
                        echo "‚ùå send_email.py not found!"
                        exit 1
                    fi
                    
                    echo "‚úÖ All Python scripts found"
                    echo "üêç Python version: $(${PYTHON_PATH} --version 2>&1 || echo 'Python not found')"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing Python dependencies inside Docker container..."
                }
                
                sh '''
                    echo "üîß Installing Python packages directly (no sudo needed in container)..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Method 1: Try using existing pip3
                    if command -v pip3 >/dev/null 2>&1; then
                        echo "‚úÖ Found pip3, installing packages..."
                        PIP_CMD="pip3"
                    elif ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                        echo "‚úÖ Found python -m pip, installing packages..."
                        PIP_CMD="${PYTHON_PATH} -m pip"
                    else
                        # Method 2: Install pip first
                        echo "üì• Installing pip using ensurepip..."
                        ${PYTHON_PATH} -m ensurepip --upgrade --user || echo "‚ö†Ô∏è ensurepip failed"
                        
                        # Method 3: Download get-pip.py
                        if ! ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                            echo "üì• Downloading get-pip.py..."
                            curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py || wget -q https://bootstrap.pypa.io/get-pip.py || echo "‚ö†Ô∏è Could not download get-pip"
                            
                            if [ -f get-pip.py ]; then
                                ${PYTHON_PATH} get-pip.py --user || echo "‚ö†Ô∏è get-pip failed"
                                rm -f get-pip.py
                            fi
                        fi
                        
                        # Determine final pip command
                        if command -v pip3 >/dev/null 2>&1; then
                            PIP_CMD="pip3"
                        elif ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                            PIP_CMD="${PYTHON_PATH} -m pip"
                        else
                            echo "‚ùå Could not install pip"
                            PIP_CMD="echo 'No pip available'"
                        fi
                    fi
                    
                    # Install packages if pip is available
                    if [ "$PIP_CMD" != "echo 'No pip available'" ]; then
                        echo "üì¶ Installing packages with: $PIP_CMD"
                        
                        # Try --user flag first, then without
                        echo "üìà Upgrading pip..."
                        $PIP_CMD install --upgrade pip --user 2>/dev/null || $PIP_CMD install --upgrade pip 2>/dev/null || echo "‚ö†Ô∏è pip upgrade failed"
                        
                        echo "üì¶ Installing selenium..."
                        $PIP_CMD install selenium --user 2>/dev/null || $PIP_CMD install selenium 2>/dev/null || echo "‚ö†Ô∏è selenium install failed"
                        
                        echo "üì¶ Installing webdriver-manager..."
                        $PIP_CMD install webdriver-manager --user 2>/dev/null || $PIP_CMD install webdriver-manager 2>/dev/null || echo "‚ö†Ô∏è webdriver-manager install failed"
                        
                        echo "üì¶ Installing additional packages..."
                        $PIP_CMD install requests urllib3 --user 2>/dev/null || $PIP_CMD install requests urllib3 2>/dev/null || echo "‚ö†Ô∏è additional packages install failed"
                        
                    else
                        echo "‚ùå No pip available for package installation"
                    fi
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    
                    # Verify installation
                    echo "üîç Verifying installations..."
                    
                    ${PYTHON_PATH} -c "
import sys
import os

# Add user site-packages to path
import site
user_site = site.getusersitepackages()
if user_site not in sys.path:
    sys.path.insert(0, user_site)

selenium_ok = False
webdriver_ok = False
requests_ok = False
smtp_ok = False

try:
    import selenium
    print(f'‚úÖ Selenium {selenium.__version__} available')
    selenium_ok = True
except ImportError as e:
    print(f'‚ùå Selenium not available: {e}')

try:
    import webdriver_manager
    print('‚úÖ webdriver-manager available')
    webdriver_ok = True
except ImportError as e:
    print(f'‚ùå webdriver-manager not available: {e}')

try:
    import requests
    print('‚úÖ requests available')
    requests_ok = True
except ImportError as e:
    print(f'‚ùå requests not available: {e}')

try:
    import smtplib
    print('‚úÖ smtplib (email) available')
    smtp_ok = True
except ImportError as e:
    print(f'‚ùå smtplib not available: {e}')

if selenium_ok and webdriver_ok and smtp_ok:
    print('üéâ All required packages installed successfully!')
else:
    print('‚ö†Ô∏è Some packages missing, but continuing...')
    
print(f'Python executable: {sys.executable}')
print(f'Python path: {sys.path}')
"
                    
                    # Verify browsers
                    echo "üîç Checking available browsers:"
                    if command -v google-chrome >/dev/null 2>&1; then
                        echo "‚úÖ Chrome: $(google-chrome --version 2>/dev/null || echo 'installed')"
                    else
                        echo "‚ö†Ô∏è Chrome not found in PATH"
                    fi
                    
                    if command -v firefox-esr >/dev/null 2>&1; then
                        echo "‚úÖ Firefox: $(firefox-esr --version 2>/dev/null || echo 'installed')"
                    else
                        echo "‚ö†Ô∏è Firefox not found in PATH"
                    fi
                    
                    # Check shared memory size
                    echo "üíæ Checking shared memory:"
                    df -h /dev/shm 2>/dev/null || echo "‚ö†Ô∏è Could not check /dev/shm"
                    
                    echo "‚úÖ Dependencies installation completed"
                '''
            }
        }
        
        stage('Step 1: Create/Verify Temp Email') {
            steps {
                script {
                    echo "üìß Step 1: Creating or verifying temporary email..."
                }
                
                sh '''
                    # Check if email_info.txt exists and is recent (less than 8 minutes old)
                    if [ -f "${TEMP_EMAIL_FILE}" ] && [ $(find "${TEMP_EMAIL_FILE}" -mmin -8 | wc -l) -gt 0 ]; then
                        echo "‚úÖ Using existing temporary email (still valid)"
                        cat "${TEMP_EMAIL_FILE}"
                    else
                        echo "üÜï Creating new temporary email..."
                        ${PYTHON_PATH} create_email.py
                        
                        if [ $? -eq 0 ]; then
                            echo "‚úÖ Temporary email created successfully"
                        else
                            echo "‚ùå Failed to create temporary email"
                            exit 1
                        fi
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "${TEMP_EMAIL_FILE}", allowEmptyArchive: true
                }
            }
        }
        
        // üõë MANUAL APPROVAL STAGE - Pipeline pauses here
        stage('‚è∏Ô∏è Manual Approval') {
            steps {
                script {
                    echo "‚è≥ Waiting for manual approval to proceed..."
                    echo "üìß Email created - ready for complete automation process"
                    echo "üåê The email will be used for automatic website signup in Step 2"
                    echo "üéØ After signup, messages will be processed and account activated automatically"
                    echo "üì® Final credentials will be emailed to matan@yahoo.com"
                    
                    // Display email info for user reference
                    if (fileExists("${env.TEMP_EMAIL_FILE}")) {
                        def emailInfo = readFile("${env.TEMP_EMAIL_FILE}")
                        echo "üìã Current Email Info:"
                        echo "${emailInfo}"
                        
                        // Extract and display email address
                        try {
                            def emailAddress = sh(
                                script: "grep 'EMAIL_ADDRESS=' ${env.TEMP_EMAIL_FILE} | cut -d'=' -f2 || echo 'Not found'",
                                returnStdout: true
                            ).trim()
                            
                            if (emailAddress && emailAddress != 'Not found') {
                                echo "üìß ‚û§ Temporary email: ${emailAddress}"
                                echo "üåê ‚û§ This will be used for website signup in Step 2"
                                echo "üíå ‚û§ After signup, the system will check for messages"
                                echo "üéØ ‚û§ If activation email is found, account will be activated automatically"
                                echo "üìÑ ‚û§ Final credentials will be saved to user.password.txt"
                                echo "üì® ‚û§ Credentials will be emailed to matan@yahoo.com"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Could not extract email address, check email_info.txt"
                        }
                    }
                }
                
                // üõë This is where the pipeline PAUSES and waits for user input
                script {
                    def userInput = input(
                        message: 'üìß Ready to proceed with complete automation?\n\nüåê Step 2: Website signup\nüì¨ Steps 3&4: Check and process messages\nüéØ Step 5: Account activation\nüìÑ Step 6: Email credentials to matan@yahoo.com\n\nClick OK to continue.',
                        ok: 'OK - Proceed with all steps',
                        parameters: [
                            choice(
                                name: 'APPROVAL_ACTION',
                                choices: ['FULL_PROCESS', 'SIGNUP_ONLY', 'SKIP_SIGNUP'],
                                description: 'FULL_PROCESS: All steps including activation and email | SIGNUP_ONLY: Steps 2 only | SKIP_SIGNUP: Steps 3,4,5,6 only'
                            )
                        ]
                    )
                    
                    // Store the user input for later use
                    env.APPROVAL_ACTION = userInput
                    
                    echo "‚úÖ Manual approval received!"
                    echo "üéõÔ∏è Selected action: ${env.APPROVAL_ACTION}"
                    
                    if (env.APPROVAL_ACTION == 'FULL_PROCESS') {
                        echo "üöÄ All steps will be executed: signup + message processing + activation + email delivery"
                    } else if (env.APPROVAL_ACTION == 'SIGNUP_ONLY') {
                        echo "üåê Only website signup will be performed"
                    } else {
                        echo "üì¨ Only message processing, activation and email will be performed (no signup)"
                    }
                }
            }
        }
        
        // üåê STEP 2: Website Signup
        stage('Step 2: Website Signup') {
            when {
                // Run if user chose full process or signup only
                expression {
                    return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SIGNUP_ONLY']
                }
            }
            
            steps {
                script {
                    echo "üåê Step 2: Automated website signup..."
                    echo "‚úÖ User approved website signup process"
                }
                
                sh '''
                    echo "ü§ñ Running automated website signup..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Final dependency check
                    echo "üîç Final dependency check with updated PATH..."
                    ${PYTHON_PATH} -c "
import sys
import site

# Add user site-packages to path
user_site = site.getusersitepackages()
if user_site not in sys.path:
    sys.path.insert(0, user_site)

selenium_available = False
try:
    import selenium
    from selenium import webdriver
    print(f'‚úÖ Selenium {selenium.__version__} ready')
    selenium_available = True
except ImportError as e:
    print(f'‚ùå Selenium not available: {e}')

try:
    import webdriver_manager
    print('‚úÖ webdriver-manager ready')
except ImportError as e:
    print(f'‚ùå webdriver-manager not available: {e}')

if not selenium_available:
    print('‚ö†Ô∏è Selenium not available - website signup will fail')
    print('üí° Check package installation logs above')
    # Don't exit here, let the signup script handle the error
"
                    
                    # Verify we have the email file
                    if [ ! -f "${TEMP_EMAIL_FILE}" ]; then
                        echo "‚ùå No email file found for signup"
                        exit 1
                    fi
                    
                    # Extract email address for display
                    EMAIL_ADDR=$(grep 'EMAIL_ADDRESS=' "${TEMP_EMAIL_FILE}" | cut -d'=' -f2 || echo 'Unknown')
                    echo "üìß Using email for signup: $EMAIL_ADDR"
                    
                    # Check shared memory before running browsers
                    echo "üíæ Shared memory status before browser startup:"
                    df -h /dev/shm 2>/dev/null || echo "‚ö†Ô∏è Could not check /dev/shm"
                    
                    # Run the signup automation with extended timeout and proper PATH
                    echo "üöÄ Starting website signup automation..."
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    timeout 600s ${PYTHON_PATH} website_signup.py || {
                        SIGNUP_RESULT=$?
                        echo "‚ö†Ô∏è Website signup returned exit code: $SIGNUP_RESULT"
                        
                        if [ $SIGNUP_RESULT -eq 124 ]; then
                            echo "‚è∞ Website signup timed out (10 minutes)"
                        elif [ $SIGNUP_RESULT -eq 1 ]; then
                            echo "üîß Website signup failed - check browser logs"
                        fi
                        
                        echo "üí° Check logs and screenshots for details"
                    }
                    
                    # Display signup info if file was created
                    if [ -f "signup_info.json" ]; then
                        echo "üìã Signup Details:"
                        cat signup_info.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat signup_info.json
                    fi
                    
                    # List all created files for debugging
                    echo "üìÅ Files created during signup:"
                    ls -la signup_*.png signup_*.json 2>/dev/null || echo "No signup files created"
                    
                    echo "‚úÖ Website signup phase completed (check results above)"
                '''
            }
            
            post {
                always {
                    // Archive signup files and any screenshots
                    archiveArtifacts artifacts: "signup_*.json,signup_*.png", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 3: Check for New Messages
        stage('Step 3: Check for New Messages') {
            when {
                // Run if user chose full process or skip signup
                expression {
                    return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SKIP_SIGNUP']
                }
            }
            
            steps {
                script {
                    echo "üîç Step 3: Checking for new messages..."
                    echo "‚úÖ Manual approval received - proceeding with message check"
                }
                
                sh '''
                    echo "üì¨ Running message checker..."
                    # Use timeout to prevent hanging and provide non-interactive input
                    timeout 300s ${PYTHON_PATH} -c "
from check_messages import read_email_info, get_email_messages
email_id, email_address = read_email_info()
if email_id and email_address:
    print(f'üìß Checking messages for: {email_address}')
    messages = get_email_messages(email_id)
    if messages:
        print(f'‚úÖ Found {len(messages)} new messages')
    else:
        print('üì≠ No new messages found')
else:
    print('‚ùå Could not read email information')
    exit(1)
"
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ Message check completed successfully"
                    else
                        echo "‚ö†Ô∏è Message check completed with warnings"
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "${MESSAGE_IDS_FILE}", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 4: Get Message Details
        stage('Step 4: Get Message Details') {
            when {
                allOf {
                    // Only run this stage if message_ids.txt exists and is not empty
                    expression {
                        return fileExists('message_ids.txt') && 
                               sh(script: "[ -s message_ids.txt ]", returnStatus: true) == 0
                    }
                    // Also check if user chose to get message details
                    expression {
                        return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SKIP_SIGNUP']
                    }
                }
            }
            
            steps {
                script {
                    echo "üìñ Step 4: Getting detailed message information..."
                    echo "‚úÖ User approved proceeding with detailed message processing"
                }
                
                sh '''
                    echo "üîç Processing stored message IDs..."
                    # Use timeout and provide automated input for the script
                    timeout 600s ${PYTHON_PATH} -c "
from get_message_details import read_email_info, read_message_ids, get_all_messages, filter_messages_by_ids, display_message_details, save_message_details
# Read necessary information
email_id = read_email_info()
target_message_ids = read_message_ids()
if not email_id:
    print('‚ùå Could not read email information')
    exit(1)
if not target_message_ids:
    print('üì≠ No stored message IDs found')
    exit(0)
print(f'üöÄ Processing {len(target_message_ids)} stored message IDs...')
# Get all messages and filter
all_messages = get_all_messages(email_id)
if all_messages is None:
    print('‚ùå Failed to fetch messages')
    exit(1)
filtered_messages = filter_messages_by_ids(all_messages, target_message_ids)
if not filtered_messages:
    print('üì≠ No matching messages found')
    exit(0)
print(f'üìß Processing {len(filtered_messages)} matching messages...')
# Process each message automatically (save all to JSON)
for i, message in enumerate(filtered_messages, 1):
    message_id = message.get('id', f'unknown_{i}')
    print(f'\\n--- Processing Message {i}/{len(filtered_messages)} ---')
    display_message_details(message, i)
    
    # Auto-save all message details
    save_message_details(message_id, message)
    
print(f'‚úÖ Processed all {len(filtered_messages)} messages')
"
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ Message details processing completed successfully"
                    else
                        echo "‚ö†Ô∏è Message details processing completed with warnings"
                    fi
                '''
            }
            
            post {
                success {
                    // Archive all JSON files created
                    archiveArtifacts artifacts: "message_details_*.json", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 5: Activate Account
        stage('Step 5: Activate Account') {
            when {
                allOf {
                    // Only run if we have message details and signup was successful
                    expression {
                        return fileExists('signup_info.json') && 
                               sh(script: "ls -1 message_details_*.json 2>/dev/null | wc -l", returnStdout: true).trim() != "0"
                    }
                    expression {
                        return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SKIP_SIGNUP']
                    }
                }
            }
            
            steps {
                script {
                    echo "üéØ Step 5: Activating account with confirmation link..."
                    echo "‚úÖ Processing activation from email messages"
                    echo "üìß This will complete the full account setup process"
                }
                
                sh '''
                    echo "üîó Running account activation..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Check prerequisites
                    echo "üîç Checking activation prerequisites..."
                    
                    if [ ! -f "signup_info.json" ]; then
                        echo "‚ùå No signup_info.json found - cannot proceed with activation"
                        exit 1
                    fi
                    
                    MESSAGE_COUNT=$(ls -1 message_details_*.json 2>/dev/null | wc -l)
                    if [ $MESSAGE_COUNT -eq 0 ]; then
                        echo "‚ùå No message details found - cannot find activation link"
                        exit 1
                    fi
                    
                    echo "‚úÖ Found signup info and $MESSAGE_COUNT message files"
                    
                    # Run the activation script with timeout
                    echo "üöÄ Starting account activation..."
                    timeout 600s ${PYTHON_PATH} activate_account.py || {
                        ACTIVATION_RESULT=$?
                        echo "‚ö†Ô∏è Account activation returned exit code: $ACTIVATION_RESULT"
                        
                        if [ $ACTIVATION_RESULT -eq 124 ]; then
                            echo "‚è∞ Account activation timed out (10 minutes)"
                        elif [ $ACTIVATION_RESULT -eq 1 ]; then
                            echo "üîß Activation failed - check logs and screenshots"
                            echo "üí° Common issues: activation link not found, browser problems, or form changes"
                        fi
                        
                        echo "üí° Check activation screenshots for details"
                    }
                    
                    # Display activation info if file was created
                    if [ -f "activation_info.json" ]; then
                        echo "üìã Activation Details:"
                        cat activation_info.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat activation_info.json
                    fi
                    
                    # Display user credentials if file was created
                    if [ -f "user.password.txt" ]; then
                        echo ""
                        echo "üë§ FINAL USER CREDENTIALS:"
                        cat user.password.txt
                    fi
                    
                    # List all created files
                    echo "üìÅ Files created during activation:"
                    ls -la activation_*.png activation_*.json user.password.txt 2>/dev/null || echo "No activation files created"
                    
                    echo "‚úÖ Account activation phase completed (check results above)"
                '''
            }
            
            post {
                always {
                    // Archive activation files including user credentials
                    archiveArtifacts artifacts: "activation_*.png,activation_*.json,user.password.txt", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 6: Send Credentials Email
        stage('Step 6: Send Credentials Email') {
            when {
                allOf {
                    // Only run if we have user credentials file
                    expression {
                        return fileExists('user.password.txt')
                    }
                    expression {
                        return env.APPROVAL_ACTION in ['FULL_PROCESS']
                    }
                }
            }
            
            steps {
                script {
                    echo "üìß Step 6: Sending credentials email to matan@yahoo.com..."
                    echo "‚úÖ Final step - delivering account credentials via email"
                }
                
                sh '''
                    echo "üì® Preparing to send credentials email..."
                    
                    # Check prerequisites
                    if [ ! -f "user.password.txt" ]; then
                        echo "‚ùå No user.password.txt found - cannot send email"
                        exit 1
                    fi
                    
                    echo "üìã Credentials file content:"
                    cat user.password.txt
                    echo ""
                    
                    # Run the email sender script
                    echo "üöÄ Starting email delivery..."
                    timeout 120s ${PYTHON_PATH} send_email.py || {
                        EMAIL_RESULT=$?
                        echo "‚ö†Ô∏è Email sending returned exit code: $EMAIL_RESULT"
                        
                        if [ $EMAIL_RESULT -eq 124 ]; then
                            echo "‚è∞ Email sending timed out (2 minutes)"
                        elif [ $EMAIL_RESULT -eq 1 ]; then
                            echo "üîß Email sending failed - check SMTP configuration"
                            echo "üí° Make sure Gmail app password is configured correctly"
                        fi
                        
                        echo "üí° Check email logs for details"
                    }
                    
                    # Display email sending info if file was created
                    if [ -f "email_sent.json" ]; then
                        echo "üìã Email Sending Details:"
                        cat email_sent.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat email_sent.json
                    fi
                    
                    echo "‚úÖ Email sending phase completed (check results above)"
                '''
            }
            
            post {
                always {
                    // Archive email logs
                    archiveArtifacts artifacts: "email_sent.json", allowEmptyArchive: true
                }
            }
        }
        
        stage('Generate Summary Report') {
            steps {
                script {
                    echo "üìä Generating complete pipeline summary report..."
                }
                
                sh '''
                    # Create a comprehensive summary report with build number
                    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                    REPORT_FILE="build_${BUILD_NUMBER}_summary_${TIMESTAMP}.txt"
                    
                    echo "=== BUILD ${BUILD_NUMBER} - COMPLETE PIPELINE SUMMARY ===" > "$REPORT_FILE"
                    echo "Timestamp: ${TIMESTAMP}" >> "$REPORT_FILE"
                    echo "Build Date: $(date)" >> "$REPORT_FILE"
                    echo "Build Number: ${BUILD_NUMBER}" >> "$REPORT_FILE"
                    echo "Jenkins Job: ${JOB_NAME}" >> "$REPORT_FILE"
                    echo "Manual Approval: ${APPROVAL_ACTION}" >> "$REPORT_FILE"
                    echo "Environment: Jenkins Docker Container" >> "$REPORT_FILE"
                    echo "" >> "$REPORT_FILE"
                    
                    # Email info
                    if [ -f "${TEMP_EMAIL_FILE}" ]; then
                        echo "üìß TEMPORARY EMAIL INFO:" >> "$REPORT_FILE"
                        cat "${TEMP_EMAIL_FILE}" >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Signup information (step 2)
                    if [ -f "signup_info.json" ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üåê WEBSITE SIGNUP INFORMATION (Step 2):" >> "$REPORT_FILE"
                        cat signup_info.json >> "$REPORT_FILE" 2>/dev/null || echo "Could not read signup info"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Message count (step 3)
                    if [ -f "${MESSAGE_IDS_FILE}" ]; then
                        MSG_COUNT=$(grep -c "MESSAGE_ID=" "${MESSAGE_IDS_FILE}" || echo "0")
                        echo "üì¨ TOTAL MESSAGES PROCESSED (Step 3): $MSG_COUNT" >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Detailed message files (step 4)
                    DETAIL_COUNT=$(ls -1 message_details_*.json 2>/dev/null | wc -l)
                    echo "üìñ DETAILED MESSAGE FILES CREATED (Step 4): $DETAIL_COUNT" >> "$REPORT_FILE"
                    
                    if [ $DETAIL_COUNT -gt 0 ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üìÑ DETAILED MESSAGE FILES:" >> "$REPORT_FILE"
                        ls -la message_details_*.json >> "$REPORT_FILE" 2>/dev/null || true
                    fi
                    
                    # Activation information (step 5)
                    if [ -f "activation_info.json" ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üéØ ACCOUNT ACTIVATION INFORMATION (Step 5):" >> "$REPORT_FILE"
                        cat activation_info.json >> "$REPORT_FILE" 2>/dev/null || echo "Could not read activation info"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Final credentials (step 5)
                    if [ -f "user.password.txt" ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üë§ FINAL USER CREDENTIALS:" >> "$REPORT_FILE"
                        cat user.password.txt >> "$REPORT_FILE" 2>/dev/null || echo "Could not read user credentials"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Email sending information (step 6)
                    if [ -f "email_sent.json" ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üì® EMAIL DELIVERY INFORMATION (Step 6):" >> "$REPORT_FILE"
                        cat email_sent.json >> "$REPORT_FILE" 2>/dev/null || echo "Could not read email info"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Screenshots info
                    SCREENSHOT_COUNT=$(ls -1 *.png 2>/dev/null | wc -l)
                    if [ $SCREENSHOT_COUNT -gt 0 ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üì∏ SCREENSHOTS CAPTURED: $SCREENSHOT_COUNT" >> "$REPORT_FILE"
                        echo "Signup screenshots: $(ls -1 signup_*.png 2>/dev/null | wc -l)" >> "$REPORT_FILE"
                        echo "Activation screenshots: $(ls -1 activation_*.png 2>/dev/null | wc -l)" >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                        echo "üì∏ SCREENSHOT FILES:" >> "$REPORT_FILE"
                        ls -la *.png >> "$REPORT_FILE" 2>/dev/null || true
                    fi
                    
                    # Environment info
                    echo "" >> "$REPORT_FILE"
                    echo "üê≥ DOCKER CONTAINER INFO:" >> "$REPORT_FILE"
                    echo "Python: $(${PYTHON_PATH} --version 2>/dev/null || echo 'Not available')" >> "$REPORT_FILE"
                    echo "Chrome: $(google-chrome --version 2>/dev/null || echo 'Not available')" >> "$REPORT_FILE"
                    echo "Firefox: $(firefox-esr --version 2>/dev/null || echo 'Not available')" >> "$REPORT_FILE"
                    echo "Shared Memory: $(df -h /dev/shm 2>/dev/null | tail -1 || echo 'Not available')" >> "$REPORT_FILE"
                    
                    # Dependency info
                    echo "" >> "$REPORT_FILE"
                    echo "üîß PYTHON DEPENDENCIES:" >> "$REPORT_FILE"
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    ${PYTHON_PATH} -c "
import sys
import site

# Add user site-packages to path
user_site = site.getusersitepackages()
if user_site not in sys.path:
    sys.path.insert(0, user_site)

try:
    import selenium
    print(f'‚úÖ Selenium: {selenium.__version__}')
except:
    print('‚ùå Selenium: Not available')
    
try:
    import webdriver_manager
    print('‚úÖ webdriver-manager: Available')
except:
    print('‚ùå webdriver-manager: Not available')

try:
    import requests
    print('‚úÖ requests: Available')
except:
    print('‚ùå requests: Not available')

try:
    import smtplib
    print('‚úÖ smtplib (email): Available')
except:
    print('‚ùå smtplib: Not available')
" >> "$REPORT_FILE" 2>/dev/null || echo "Could not check dependencies" >> "$REPORT_FILE"
                    
                    # Final summary
                    echo "" >> "$REPORT_FILE"
                    echo "üéØ PIPELINE COMPLETION SUMMARY:" >> "$REPORT_FILE"
                    if [ -f "signup_info.json" ]; then
                        echo "‚úÖ Step 2: Website signup completed" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 2: Website signup not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "${MESSAGE_IDS_FILE}" ]; then
                        echo "‚úÖ Step 3: Message check completed" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 3: Message check not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ $DETAIL_COUNT -gt 0 ]; then
                        echo "‚úÖ Step 4: Message details processed ($DETAIL_COUNT files)" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 4: No message details processed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "activation_info.json" ]; then
                        echo "‚úÖ Step 5: Account activation completed" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 5: Account activation not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "email_sent.json" ]; then
                        echo "‚úÖ Step 6: Credentials email sent" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 6: Credentials email not sent" >> "$REPORT_FILE"
                    fi
                    
                    echo "" >> "$REPORT_FILE"
                    echo "=== END BUILD ${BUILD_NUMBER} COMPLETE SUMMARY ===" >> "$REPORT_FILE"
                    
                    echo "üìÑ Build summary report created: $REPORT_FILE"
                    cat "$REPORT_FILE"
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "build_*_summary_*.txt", allowEmptyArchive: true
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Complete pipeline finished in Docker container"
                
                // Clean up workspace but keep important files
                sh '''
                    echo "üßπ Cleaning up temporary files..."
                    # Remove Python cache files
                    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
                    find . -name "*.pyc" -delete 2>/dev/null || true
                    
                    # Keep only current build artifacts
                    echo "üìÅ Final artifact count:"
                    echo "Summary files: $(ls -1 build_${BUILD_NUMBER}_summary_*.txt 2>/dev/null | wc -l)"
                    echo "Signup files: $(ls -1 signup_*.json 2>/dev/null | wc -l)" 
                    echo "Activation files: $(ls -1 activation_*.json 2>/dev/null | wc -l)"
                    echo "Message files: $(ls -1 message_details_*.json 2>/dev/null | wc -l)"
                    echo "Credentials file: $(ls -1 user.password.txt 2>/dev/null | wc -l)"
                    echo "Email logs: $(ls -1 email_sent.json 2>/dev/null | wc -l)"
                    echo "Screenshots: $(ls -1 *.png 2>/dev/null | wc -l)"
                '''
            }
        }
        
        success {
            script {
                echo "‚úÖ Complete pipeline completed successfully in Docker container"
                
                if (env.APPROVAL_ACTION == 'FULL_PROCESS') {
                    echo "üéâ All steps completed: signup + message processing + activation + email delivery"
                    if (fileExists('email_sent.json')) {
                        echo "üì® Credentials successfully emailed to matan@yahoo.com!"
                    }
                } else if (env.APPROVAL_ACTION == 'SIGNUP_ONLY') {
                    echo "üåê Website signup completed, message processing and activation were skipped"
                } else {
                    echo "üì¨ Message processing and activation completed, signup was skipped"
                }
                
                echo "üìä Check archived artifacts for detailed results"
                echo "üè∑Ô∏è Build ${BUILD_NUMBER} artifacts are clearly labeled"
                echo "üéØ If all steps completed, the account is ready and credentials were emailed!"
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline failed in Docker container"
                
                // Try to capture more debug info
                sh '''
                    echo "üîç Debug information:"
                    echo "Python version: $(${PYTHON_PATH} --version 2>&1 || echo 'Python not found')"
                    echo "Container environment info:"
                    cat /etc/os-release 2>/dev/null || echo "OS info not available"
                    echo "PATH: $PATH"
                    echo "HOME: $HOME"
                    echo "User: $(whoami)"
                    echo "Shared memory: $(df -h /dev/shm 2>/dev/null || echo 'Not available')"
                    echo "Memory info: $(free -h 2>/dev/null || echo 'Not available')"
                    echo "Chrome version: $(google-chrome --version 2>/dev/null || echo 'Chrome not available')"
                    echo "Firefox version: $(firefox-esr --version 2>/dev/null || echo 'Firefox not available')"
                    echo "Current directory contents:"
                    ls -la
                ''' 
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline completed with warnings"
            }
        }
        
        aborted {
            script {
                echo "üõë Pipeline was aborted (possibly during manual approval)"
            }
        }
    }
}
