pipeline {
    agent any
    
    // Schedule the pipeline to run every 3 days
    triggers {
        cron('H H */3 * *')  // Runs every 3 days
    }
    
    environment {
        // Define workspace paths
        PYTHON_PATH = '/usr/bin/python3'
        WORKSPACE_DIR = "${WORKSPACE}"

        // Discord Configuration
        DISCORD_WEBHOOK_URL = 'https://discordapp.com/api/webhooks/1420217589510176779/48UhPwNV4x_OPmbIXyrhsgnhxxoLAWJt1cW96T5Cum-RQCP19gJNlVAmSYH2ydatsQeo'
        
        // Email configuration
        EMAIL_RECIPIENTS = 'matan@yahoo.com'
        GMAIL_SENDER = 'your-jenkins-email@gmail.com'
        GMAIL_APP_PASSWORD = 'your-16-char-app-password'
        
        // File configurations
        TEMP_EMAIL_FILE = 'email_info.txt'
        MESSAGE_IDS_FILE = 'message_ids.txt'
        SIGNUP_FILE = 'signup_info.json'
        ACTIVATION_FILE = 'activation_info.json'
        USER_CREDENTIALS_FILE = 'user.password.txt'
        EMAIL_LOG_FILE = 'email_sent.json'
        
        ARTIFACTS_PATTERN = '*.txt,*.json,message_details_*.json,signup_*.json,activation_*.json,user.password.txt,email_sent.json'
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '50'))
        timeout(time: 45, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }
    
    stages {
        stage('üßπ Fresh Start Cleanup') {
            steps {
                script {
                    echo "üßπ Ensuring fresh start by removing all generated files"
                    echo "üîÑ This guarantees no interference from previous runs"
                    echo "üóëÔ∏è Cleaning workspace for Build #${BUILD_NUMBER}"
                }
                
                sh '''
                    echo "üóëÔ∏è COMPLETE CLEANUP - Removing ALL generated files..."
                    
                    # Show what exists before cleanup
                    echo "üìã Files before cleanup:"
                    ls -la
                    echo ""
                    
                    # Remove everything generated by pipeline
                    echo "üîÑ Removing pipeline artifacts..."
                    
                    # Remove files with error handling
                    rm -f email_info.txt message_ids.txt message_details_*.json 2>/dev/null || true
                    rm -f signup_info.json signup_*.json signup_*.png 2>/dev/null || true  
                    rm -f activation_info.json activation_*.json activation_*.png 2>/dev/null || true
                    rm -f user.password.txt email_sent.json 2>/dev/null || true
                    rm -f *.png *.log get-pip.py 2>/dev/null || true
                    rm -f build_*_summary_*.txt complete_pipeline_summary_*.txt 2>/dev/null || true
                    
                    # Remove Python cache
                    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
                    find . -name "*.pyc" -delete 2>/dev/null || true
                    
                    # Remove temporary directories
                    rm -rf chrome_*_profile/ firefox_*_profile/ 2>/dev/null || true
                    
                    echo "‚úÖ Cleanup completed!"
                    echo ""
                    echo "üìÅ Files after cleanup (should only show source .py files):"
                    ls -la
                    echo ""
                    
                    # Verify clean state
                    GENERATED_FILES=$(ls -1 *.txt *.json *.png 2>/dev/null | grep -v -E '\\.(py)$' | wc -l || echo 0)
                    if [ "$GENERATED_FILES" -eq 0 ]; then
                        echo "üéâ Perfect! Workspace is completely clean for fresh start"
                    else
                        echo "‚ö†Ô∏è Some generated files still exist - will be overwritten"
                    fi
                '''
            }
        }
        
        stage('üöÄ Pipeline Started') {
            steps {
                script {
                    echo "üöÄ Starting Fully Automated EmbyIL Account Creation"
                    echo "üìÖ Build Date: ${new Date()}"
                    echo "üî¢ Build Number: ${BUILD_NUMBER}"
                    echo "üìÇ Workspace: ${WORKSPACE_DIR}"
                    echo "ü§ñ Running fully automated - no manual intervention required"
                }
                
                // Send pipeline start notification to Discord
                sh '''
                    if [ -n "$DISCORD_WEBHOOK_URL" ]; then
                        echo "üì± Sending pipeline start notification to Discord..."
                        curl -s -X POST "$DISCORD_WEBHOOK_URL" \
                          -H "Content-Type: application/json" \
                          -d '{
                            "username": "Jenkins EmbyIL Bot",
                            "embeds": [{
                              "title": "üöÄ EmbyIL Pipeline Started",
                              "description": "Build #'"$BUILD_NUMBER"' - Fully automated account creation process has begun",
                              "color": 3447003,
                              "fields": [
                                {
                                  "name": "ü§ñ Mode",
                                  "value": "Fully Automated - No manual intervention required",
                                  "inline": false
                                },
                                {
                                  "name": "üìã Process",
                                  "value": "Email Creation ‚Üí Signup ‚Üí Messages ‚Üí Activation ‚Üí Delivery",
                                  "inline": false
                                }
                              ],
                              "footer": {
                                "text": "Jenkins Automation System"
                              },
                              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'"
                            }]
                          }' || echo "Discord start notification failed"
                    fi
                '''
            }
        }
        
        stage('Check Python Scripts') {
            steps {
                script {
                    echo "üìã Checking if Python scripts exist..."
                }
                
                sh '''
                    if [ ! -f "create_email.py" ]; then
                        echo "‚ùå create_email.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "check_messages.py" ]; then
                        echo "‚ùå check_messages.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "get_message_details.py" ]; then
                        echo "‚ùå get_message_details.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "website_signup.py" ]; then
                        echo "‚ùå website_signup.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "activate_account.py" ]; then
                        echo "‚ùå activate_account.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "send_email.py" ]; then
                        echo "‚ùå send_email.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "send_approval_webhook.py" ]; then
                        echo "‚ùå send_approval_webhook.py not found!"
                        exit 1
                    fi
                    
                    echo "‚úÖ All Python scripts found"
                    echo "üêç Python version: $(${PYTHON_PATH} --version 2>&1 || echo 'Python not found')"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing Python dependencies inside Docker container..."
                }
                
                sh '''
                    echo "üîß Installing Python packages directly (no sudo needed in container)..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Method 1: Try using existing pip3
                    if command -v pip3 >/dev/null 2>&1; then
                        echo "‚úÖ Found pip3, installing packages..."
                        PIP_CMD="pip3"
                    elif ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                        echo "‚úÖ Found python -m pip, installing packages..."
                        PIP_CMD="${PYTHON_PATH} -m pip"
                    else
                        # Method 2: Install pip first
                        echo "üì• Installing pip using ensurepip..."
                        ${PYTHON_PATH} -m ensurepip --upgrade --user || echo "‚ö†Ô∏è ensurepip failed"
                        
                        # Method 3: Download get-pip.py
                        if ! ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                            echo "üì• Downloading get-pip.py..."
                            curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py || wget -q https://bootstrap.pypa.io/get-pip.py || echo "‚ö†Ô∏è Could not download get-pip"
                            
                            if [ -f get-pip.py ]; then
                                ${PYTHON_PATH} get-pip.py --user || echo "‚ö†Ô∏è get-pip failed"
                                rm -f get-pip.py
                            fi
                        fi
                        
                        # Determine final pip command
                        if command -v pip3 >/dev/null 2>&1; then
                            PIP_CMD="pip3"
                        elif ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                            PIP_CMD="${PYTHON_PATH} -m pip"
                        else
                            echo "‚ùå Could not install pip"
                            PIP_CMD="echo 'No pip available'"
                        fi
                    fi
                    
                    # Install packages if pip is available
                    if [ "$PIP_CMD" != "echo 'No pip available'" ]; then
                        echo "üì¶ Installing packages with: $PIP_CMD"
                        
                        # Try --user flag first, then without
                        echo "üìà Upgrading pip..."
                        $PIP_CMD install --upgrade pip --user 2>/dev/null || $PIP_CMD install --upgrade pip 2>/dev/null || echo "‚ö†Ô∏è pip upgrade failed"
                        
                        echo "üì¶ Installing selenium..."
                        $PIP_CMD install selenium --user 2>/dev/null || $PIP_CMD install selenium 2>/dev/null || echo "‚ö†Ô∏è selenium install failed"
                        
                        echo "üì¶ Installing webdriver-manager..."
                        $PIP_CMD install webdriver-manager --user 2>/dev/null || $PIP_CMD install webdriver-manager 2>/dev/null || echo "‚ö†Ô∏è webdriver-manager install failed"
                        
                        echo "üì¶ Installing additional packages..."
                        $PIP_CMD install requests urllib3 --user 2>/dev/null || $PIP_CMD install requests urllib3 2>/dev/null || echo "‚ö†Ô∏è additional packages install failed"
                        
                    else
                        echo "‚ùå No pip available for package installation"
                    fi
                    
                    echo "‚úÖ Dependencies installation completed"
                '''
            }
        }
        
        stage('Step 1: Create Temp Email') {
            steps {
                script {
                    echo "üìß Step 1: Creating temporary email automatically..."
                }
                
                sh '''
                    echo "üÜï Creating new temporary email..."
                    ${PYTHON_PATH} create_email.py
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ Temporary email created successfully"
                        if [ -f "${TEMP_EMAIL_FILE}" ]; then
                            echo "üìß Email details:"
                            cat "${TEMP_EMAIL_FILE}"
                        fi
                    else
                        echo "‚ùå Failed to create temporary email"
                        exit 1
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "${TEMP_EMAIL_FILE}", allowEmptyArchive: true
                }
            }
        }
        
        stage('Step 2: Website Signup') {
            steps {
                script {
                    echo "üåê Step 2: Automated website signup..."
                }
                
                sh '''
                    echo "ü§ñ Running automated website signup..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Verify we have the email file
                    if [ ! -f "${TEMP_EMAIL_FILE}" ]; then
                        echo "‚ùå No email file found for signup"
                        exit 1
                    fi
                    
                    # Extract email address for display
                    EMAIL_ADDR=$(grep 'EMAIL_ADDRESS=' "${TEMP_EMAIL_FILE}" | cut -d'=' -f2 || echo 'Unknown')
                    echo "üìß Using email for signup: $EMAIL_ADDR"
                    
                    # Run the signup automation
                    echo "üöÄ Starting website signup automation..."
                    timeout 600s ${PYTHON_PATH} website_signup.py || {
                        SIGNUP_RESULT=$?
                        echo "‚ö†Ô∏è Website signup returned exit code: $SIGNUP_RESULT"
                        
                        if [ $SIGNUP_RESULT -eq 124 ]; then
                            echo "‚è∞ Website signup timed out (10 minutes)"
                        elif [ $SIGNUP_RESULT -eq 1 ]; then
                            echo "üîß Website signup failed - check browser logs"
                        fi
                        
                        echo "üí° Check logs and screenshots for details"
                    }
                    
                    # Display signup info
                    if [ -f "signup_info.json" ]; then
                        echo "üìã Signup Details:"
                        cat signup_info.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat signup_info.json
                    fi
                    
                    echo "‚úÖ Website signup phase completed"
                '''
            }
            
            post {
                always {
                    archiveArtifacts artifacts: "signup_*.json,signup_*.png", allowEmptyArchive: true
                }
            }
        }
        
        stage('Step 3: Check for Messages') {
            steps {
                script {
                    echo "üîç Step 3: Checking for new messages..."
                }
                
                sh '''
                    echo "üì¨ Running message checker..."
                    timeout 300s ${PYTHON_PATH} -c "
from check_messages import read_email_info, get_email_messages
email_id, email_address = read_email_info()
if email_id and email_address:
    print(f'üìß Checking messages for: {email_address}')
    messages = get_email_messages(email_id)
    if messages:
        print(f'‚úÖ Found {len(messages)} new messages')
    else:
        print('üì≠ No new messages found')
else:
    print('‚ùå Could not read email information')
    exit(1)
"
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ Message check completed successfully"
                    else
                        echo "‚ö†Ô∏è Message check completed with warnings"
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "${MESSAGE_IDS_FILE}", allowEmptyArchive: true
                }
            }
        }
        
        stage('Step 4: Get Message Details') {
            when {
                expression {
                    return fileExists('message_ids.txt') && 
                           sh(script: "[ -s message_ids.txt ]", returnStatus: true) == 0
                }
            }
            
            steps {
                script {
                    echo "üìñ Step 4: Getting detailed message information..."
                }
                
                sh '''
                    echo "üîç Processing stored message IDs..."
                    timeout 600s ${PYTHON_PATH} -c "
from get_message_details import read_email_info, read_message_ids, get_all_messages, filter_messages_by_ids, display_message_details, save_message_details
# Read necessary information
email_id = read_email_info()
target_message_ids = read_message_ids()
if not email_id:
    print('‚ùå Could not read email information')
    exit(1)
if not target_message_ids:
    print('üì≠ No stored message IDs found')
    exit(0)
print(f'üöÄ Processing {len(target_message_ids)} stored message IDs...')
# Get all messages and filter
all_messages = get_all_messages(email_id)
if all_messages is None:
    print('‚ùå Failed to fetch messages')
    exit(1)
filtered_messages = filter_messages_by_ids(all_messages, target_message_ids)
if not filtered_messages:
    print('üì≠ No matching messages found')
    exit(0)
print(f'üìß Processing {len(filtered_messages)} matching messages...')
# Process each message automatically
for i, message in enumerate(filtered_messages, 1):
    message_id = message.get('id', f'unknown_{i}')
    print(f'\\n--- Processing Message {i}/{len(filtered_messages)} ---')
    display_message_details(message, i)
    save_message_details(message_id, message)
print(f'‚úÖ Processed all {len(filtered_messages)} messages')
"
                    
                    if [ $? -eq 0 ]; then
                        echo "‚úÖ Message details processing completed successfully"
                    else
                        echo "‚ö†Ô∏è Message details processing completed with warnings"
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "message_details_*.json", allowEmptyArchive: true
                }
            }
        }
        
        stage('Step 5: Activate Account') {
            when {
                allOf {
                    expression {
                        return fileExists('signup_info.json') && 
                               sh(script: "ls -1 message_details_*.json 2>/dev/null | wc -l", returnStdout: true).trim() != "0"
                    }
                }
            }
            
            steps {
                script {
                    echo "üéØ Step 5: Activating account with confirmation link..."
                }
                
                sh '''
                    echo "üîó Running account activation..."
                    
                    # Update PATH
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Check prerequisites
                    if [ ! -f "signup_info.json" ]; then
                        echo "‚ùå No signup_info.json found"
                        exit 1
                    fi
                    
                    MESSAGE_COUNT=$(ls -1 message_details_*.json 2>/dev/null | wc -l)
                    if [ $MESSAGE_COUNT -eq 0 ]; then
                        echo "‚ùå No message details found"
                        exit 1
                    fi
                    
                    echo "‚úÖ Found signup info and $MESSAGE_COUNT message files"
                    
                    # Run activation
                    echo "üöÄ Starting account activation..."
                    timeout 600s ${PYTHON_PATH} activate_account.py || {
                        ACTIVATION_RESULT=$?
                        echo "‚ö†Ô∏è Account activation returned exit code: $ACTIVATION_RESULT"
                        
                        if [ $ACTIVATION_RESULT -eq 124 ]; then
                            echo "‚è∞ Account activation timed out"
                        elif [ $ACTIVATION_RESULT -eq 1 ]; then
                            echo "üîß Activation failed - check logs and screenshots"
                        fi
                    }
                    
                    # Display results
                    if [ -f "user.password.txt" ]; then
                        echo ""
                        echo "üë§ FINAL USER CREDENTIALS:"
                        cat user.password.txt
                    fi
                    
                    echo "‚úÖ Account activation phase completed"
                '''
            }
            
            post {
                always {
                    archiveArtifacts artifacts: "activation_*.png,activation_*.json,user.password.txt", allowEmptyArchive: true
                }
            }
        }
        
        stage('Step 6: Send Credentials Email') {
            when {
                expression {
                    return fileExists('user.password.txt')
                }
            }
            
            steps {
                script {
                    echo "üìß Step 6: Sending credentials email to matan@yahoo.com..."
                }
                
                sh '''
                    echo "üì® Preparing to send credentials email..."
                    
                    if [ ! -f "user.password.txt" ]; then
                        echo "‚ùå No user.password.txt found"
                        exit 1
                    fi
                    
                    echo "üìã Credentials file content:"
                    cat user.password.txt
                    echo ""
                    
                    # Run email sender
                    echo "üöÄ Starting email delivery..."
                    timeout 120s ${PYTHON_PATH} send_email.py || {
                        EMAIL_RESULT=$?
                        echo "‚ö†Ô∏è Email sending returned exit code: $EMAIL_RESULT"
                        
                        if [ $EMAIL_RESULT -eq 124 ]; then
                            echo "‚è∞ Email sending timed out"
                        elif [ $EMAIL_RESULT -eq 1 ]; then
                            echo "üîß Email sending failed"
                        fi
                    }
                    
                    # Display email info
                    if [ -f "email_sent.json" ]; then
                        echo "üìã Email Sending Details:"
                        cat email_sent.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat email_sent.json
                    fi
                    
                    echo "‚úÖ Email sending phase completed"
                '''
            }
            
            post {
                always {
                    archiveArtifacts artifacts: "email_sent.json", allowEmptyArchive: true
                }
            }
        }
        
        stage('üìä Final Notifications') {
            steps {
                script {
                    echo "üìä Sending final notifications with complete details..."
                }
                
                sh '''
                    echo "üì± Preparing Discord and Email notifications with full details..."
                    
                    # Collect all information
                    TEMP_EMAIL_CONTENT=""
                    CREDENTIALS_CONTENT=""
                    SIGNUP_INFO=""
                    ACTIVATION_INFO=""
                    
                    # Read temporary email info
                    if [ -f "${TEMP_EMAIL_FILE}" ]; then
                        TEMP_EMAIL_CONTENT=$(cat "${TEMP_EMAIL_FILE}")
                        echo "üìß Temporary email info collected"
                    fi
                    
                    # Read final credentials
                    if [ -f "user.password.txt" ]; then
                        CREDENTIALS_CONTENT=$(cat "user.password.txt")
                        echo "üë§ Credentials info collected"
                    fi
                    
                    # Read signup info
                    if [ -f "signup_info.json" ]; then
                        SIGNUP_INFO=$(cat "signup_info.json")
                        echo "üåê Signup info collected"
                    fi
                    
                    # Send detailed Discord notification
                    if [ -n "$DISCORD_WEBHOOK_URL" ] && [ -n "$CREDENTIALS_CONTENT" ]; then
                        echo "üì± Sending detailed Discord success notification..."
                        
                        # Extract email address from temp email
                        TEMP_EMAIL_ADDR=$(echo "$TEMP_EMAIL_CONTENT" | grep 'EMAIL_ADDRESS=' | cut -d'=' -f2 || echo 'Unknown')
                        
                        # Extract username from credentials (assuming it's in the file)
                        USERNAME=$(echo "$CREDENTIALS_CONTENT" | grep 'Username:' | cut -d':' -f2 | xargs || echo 'Unknown')
                        FINAL_EMAIL=$(echo "$CREDENTIALS_CONTENT" | grep 'Email:' | cut -d':' -f2 | xargs || echo 'Unknown')
                        
                        curl -s -X POST "$DISCORD_WEBHOOK_URL" \
                          -H "Content-Type: application/json" \
                          -d '{
                            "username": "Jenkins EmbyIL Success",
                            "embeds": [{
                              "title": "‚úÖ EmbyIL Account Created Successfully!",
                              "description": "Build #'"$BUILD_NUMBER"' completed - New EmbyIL account is ready! üéâ",
                              "color": 65280,
                              "fields": [
                                {
                                  "name": "üìß Temporary Email Used",
                                  "value": "``````",
                                  "inline": false
                                },
                                {
                                  "name": "üë§ Final Account Details",
                                  "value": "**Username:** '"$USERNAME"'\\n**Email:** '"$FINAL_EMAIL"'\\n**Status:** Activated & Ready",
                                  "inline": false
                                },
                                {
                                  "name": "üì® Credentials Delivery",
                                  "value": "Full credentials have been emailed to **matan@yahoo.com**",
                                  "inline": false
                                },
                                {
                                  "name": "üèóÔ∏è Build Info",
                                  "value": "Build: #'"$BUILD_NUMBER"'\\nDuration: Auto-completed\\nAll steps: ‚úÖ Success",
                                  "inline": false
                                }
                              ],
                              "footer": {
                                "text": "Jenkins EmbyIL Automation ‚Ä¢ Account Ready for Use"
                              },
                              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'",
                              "thumbnail": {
                                "url": "https://cdn-icons-png.flaticon.com/512/190/190411.png"
                              }
                            }]
                          }' || echo "Discord notification failed"
                    fi
                    
                    # Send additional email notification with all details
                    if [ -f "send_final_summary_email.py" ]; then
                        echo "üìß Sending comprehensive email summary..."
                        export NOTIFICATION_TYPE="final_summary"
                        ${PYTHON_PATH} send_final_summary_email.py || echo "‚ö†Ô∏è Summary email failed"
                    fi
                    
                    echo "‚úÖ Final notifications sent"
                '''
            }
        }
        
        stage('Generate Summary Report') {
            steps {
                script {
                    echo "üìä Generating complete pipeline summary report..."
                }
                
                sh '''
                    # Create comprehensive summary report
                    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                    REPORT_FILE="build_${BUILD_NUMBER}_summary_${TIMESTAMP}.txt"
                    
                    echo "=== BUILD ${BUILD_NUMBER} - FULLY AUTOMATED PIPELINE SUMMARY ===" > "$REPORT_FILE"
                    echo "Timestamp: ${TIMESTAMP}" >> "$REPORT_FILE"
                    echo "Build Date: $(date)" >> "$REPORT_FILE"
                    echo "Build Number: ${BUILD_NUMBER}" >> "$REPORT_FILE"
                    echo "Jenkins Job: ${JOB_NAME}" >> "$REPORT_FILE"
                    echo "Mode: Fully Automated (No Manual Approval Required)" >> "$REPORT_FILE"
                    echo "Environment: Jenkins Docker Container" >> "$REPORT_FILE"
                    echo "Workspace: Fresh start (all previous files cleaned)" >> "$REPORT_FILE"
                    echo "" >> "$REPORT_FILE"
                    
                    # Email info
                    if [ -f "${TEMP_EMAIL_FILE}" ]; then
                        echo "üìß TEMPORARY EMAIL INFO:" >> "$REPORT_FILE"
                        cat "${TEMP_EMAIL_FILE}" >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Final credentials
                    if [ -f "user.password.txt" ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "üë§ FINAL USER CREDENTIALS:" >> "$REPORT_FILE"
                        cat user.password.txt >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Pipeline completion summary
                    echo "" >> "$REPORT_FILE"
                    echo "üéØ AUTOMATED PIPELINE COMPLETION SUMMARY:" >> "$REPORT_FILE"
                    if [ -f "signup_info.json" ]; then
                        echo "‚úÖ Step 2: Website signup completed automatically" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 2: Website signup not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "activation_info.json" ]; then
                        echo "‚úÖ Step 5: Account activation completed automatically" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 5: Account activation not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "email_sent.json" ]; then
                        echo "‚úÖ Step 6: Credentials email sent automatically" >> "$REPORT_FILE"
                    else
                        echo "‚ùå Step 6: Credentials email not sent" >> "$REPORT_FILE"
                    fi
                    
                    echo "" >> "$REPORT_FILE"
                    echo "ü§ñ AUTOMATION STATUS: COMPLETED WITHOUT MANUAL INTERVENTION" >> "$REPORT_FILE"
                    echo "=== END BUILD ${BUILD_NUMBER} AUTOMATED SUMMARY ===" >> "$REPORT_FILE"
                    
                    echo "üìÑ Build summary report created: $REPORT_FILE"
                    cat "$REPORT_FILE"
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "build_*_summary_*.txt", allowEmptyArchive: true
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Fully automated pipeline finished in Docker container"
            }
        }
        
        success {
            script {
                echo "‚úÖ Fully automated pipeline completed successfully!"
                echo "ü§ñ All steps executed without manual intervention"
                echo "üì® Credentials delivered to matan@yahoo.com"
                echo "üì± Discord notifications sent"
                echo "üìä Check archived artifacts for detailed results"
                echo "üéØ Fresh workspace guaranteed for next automated run!"
            }
        }
        
        failure {
            script {
                echo "‚ùå Automated pipeline failed"
                
                // Send Discord failure notification  
                sh '''
                    if [ -n "$DISCORD_WEBHOOK_URL" ]; then
                        echo "üì± Sending Discord failure notification..."
                        curl -s -X POST "$DISCORD_WEBHOOK_URL" \
                          -H "Content-Type: application/json" \
                          -d '{
                            "username": "Jenkins Failure",
                            "embeds": [{
                              "title": "‚ùå EmbyIL Automated Pipeline Failed",
                              "description": "Build #'"$BUILD_NUMBER"' encountered an error during automated execution",
                              "color": 16711680,
                              "fields": [
                                {
                                  "name": "ü§ñ Mode",
                                  "value": "Fully Automated (Failed)",
                                  "inline": false
                                },
                                {
                                  "name": "üîó Build Details",
                                  "value": "[View Build]('"$BUILD_URL"')",
                                  "inline": false
                                }
                              ],
                              "footer": {
                                "text": "Jenkins Automation System"
                              },
                              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'"
                            }]
                          }' || echo "Discord failure notification failed"
                    fi
                '''
            }
        }
    }
}
