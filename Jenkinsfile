pipeline {
    agent any
    
    // Schedule the pipeline to run every 3 days
    triggers {
        cron('H H */3 * *')  // Runs every 3 days
    }
    
    environment {
        // Define workspace paths
        PYTHON_PATH = '/usr/bin/python3'
        WORKSPACE_DIR = "${WORKSPACE}"

        // Discord Configuration - החלף בURL שלך
        DISCORD_WEBHOOK_URL = 'https://discordapp.com/api/webhooks/1420217589510176779/48UhPwNV4x_OPmbIXyrhsgnhxxoLAWJt1cW96T5Cum-RQCP19gJNlVAmSYH2ydatsQeo'
        
        // Email configuration
        EMAIL_RECIPIENTS = 'matan@yahoo.com'
        GMAIL_SENDER = 'your-jenkins-email@gmail.com'
        GMAIL_APP_PASSWORD = 'your-16-char-app-password'
        
        // File configurations
        TEMP_EMAIL_FILE = 'email_info.txt'
        MESSAGE_IDS_FILE = 'message_ids.txt'
        SIGNUP_FILE = 'signup_info.json'
        ACTIVATION_FILE = 'activation_info.json'
        USER_CREDENTIALS_FILE = 'user.password.txt'
        EMAIL_LOG_FILE = 'email_sent.json'
        
        ARTIFACTS_PATTERN = '*.txt,*.json,message_details_*.json,signup_*.json,activation_*.json,user.password.txt,email_sent.json'
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '50'))
        timeout(time: 45, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }
    
    stages {
        stage('🧹 Fresh Start Cleanup') {
            steps {
                script {
                    echo "🧹 Ensuring fresh start by removing all generated files"
                    echo "🔄 This guarantees no interference from previous runs"
                    echo "🗑️ Cleaning workspace for Build #${BUILD_NUMBER}"
                }
                
                sh '''
                    echo "🗑️ COMPLETE CLEANUP - Removing ALL generated files..."
                    
                    # Show what exists before cleanup
                    echo "📋 Files before cleanup:"
                    ls -la
                    echo ""
                    
                    # Remove everything generated by pipeline
                    echo "🔄 Removing pipeline artifacts..."
                    
                    # Remove files with error handling
                    rm -f email_info.txt message_ids.txt message_details_*.json 2>/dev/null || true
                    rm -f signup_info.json signup_*.json signup_*.png 2>/dev/null || true  
                    rm -f activation_info.json activation_*.json activation_*.png 2>/dev/null || true
                    rm -f user.password.txt email_sent.json 2>/dev/null || true
                    rm -f *.png *.log get-pip.py 2>/dev/null || true
                    rm -f build_*_summary_*.txt complete_pipeline_summary_*.txt 2>/dev/null || true
                    
                    # Remove Python cache
                    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
                    find . -name "*.pyc" -delete 2>/dev/null || true
                    
                    # Remove temporary directories
                    rm -rf chrome_*_profile/ firefox_*_profile/ 2>/dev/null || true
                    
                    echo "✅ Cleanup completed!"
                    echo ""
                    echo "📁 Files after cleanup (should only show source .py files):"
                    ls -la
                    echo ""
                    
                    # Verify clean state
                    GENERATED_FILES=$(ls -1 *.txt *.json *.png 2>/dev/null | grep -v -E '\\.(py)$' | wc -l || echo 0)
                    if [ "$GENERATED_FILES" -eq 0 ]; then
                        echo "🎉 Perfect! Workspace is completely clean for fresh start"
                    else
                        echo "⚠️ Some generated files still exist - will be overwritten"
                    fi
                '''
            }
        }
        
        stage('Setup Environment') {
            steps {
                script {
                    echo "🚀 Starting Complete Email & Signup & Activation & Email Pipeline"
                    echo "📅 Build Date: ${new Date()}"
                    echo "🔢 Build Number: ${BUILD_NUMBER}"
                    echo "📂 Workspace: ${WORKSPACE_DIR}"
                    echo "🐳 Running in Jenkins Docker container"
                    echo "✨ Fresh workspace ready for new pipeline execution"
                }
            }
        }
        
        stage('Check Python Scripts') {
            steps {
                script {
                    echo "📋 Checking if Python scripts exist..."
                }
                
                sh '''
                    if [ ! -f "create_email.py" ]; then
                        echo "❌ create_email.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "check_messages.py" ]; then
                        echo "❌ check_messages.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "get_message_details.py" ]; then
                        echo "❌ get_message_details.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "website_signup.py" ]; then
                        echo "❌ website_signup.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "activate_account.py" ]; then
                        echo "❌ activate_account.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "send_email.py" ]; then
                        echo "❌ send_email.py not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "send_approval_webhook.py" ]; then
                        echo "❌ send_approval_webhook.py not found!"
                        exit 1
                    fi
                    
                    echo "✅ All Python scripts found"
                    echo "🐍 Python version: $(${PYTHON_PATH} --version 2>&1 || echo 'Python not found')"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "📦 Installing Python dependencies inside Docker container..."
                }
                
                sh '''
                    echo "🔧 Installing Python packages directly (no sudo needed in container)..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Method 1: Try using existing pip3
                    if command -v pip3 >/dev/null 2>&1; then
                        echo "✅ Found pip3, installing packages..."
                        PIP_CMD="pip3"
                    elif ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                        echo "✅ Found python -m pip, installing packages..."
                        PIP_CMD="${PYTHON_PATH} -m pip"
                    else
                        # Method 2: Install pip first
                        echo "📥 Installing pip using ensurepip..."
                        ${PYTHON_PATH} -m ensurepip --upgrade --user || echo "⚠️ ensurepip failed"
                        
                        # Method 3: Download get-pip.py
                        if ! ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                            echo "📥 Downloading get-pip.py..."
                            curl -s https://bootstrap.pypa.io/get-pip.py -o get-pip.py || wget -q https://bootstrap.pypa.io/get-pip.py || echo "⚠️ Could not download get-pip"
                            
                            if [ -f get-pip.py ]; then
                                ${PYTHON_PATH} get-pip.py --user || echo "⚠️ get-pip failed"
                                rm -f get-pip.py
                            fi
                        fi
                        
                        # Determine final pip command
                        if command -v pip3 >/dev/null 2>&1; then
                            PIP_CMD="pip3"
                        elif ${PYTHON_PATH} -m pip --version >/dev/null 2>&1; then
                            PIP_CMD="${PYTHON_PATH} -m pip"
                        else
                            echo "❌ Could not install pip"
                            PIP_CMD="echo 'No pip available'"
                        fi
                    fi
                    
                    # Install packages if pip is available
                    if [ "$PIP_CMD" != "echo 'No pip available'" ]; then
                        echo "📦 Installing packages with: $PIP_CMD"
                        
                        # Try --user flag first, then without
                        echo "📈 Upgrading pip..."
                        $PIP_CMD install --upgrade pip --user 2>/dev/null || $PIP_CMD install --upgrade pip 2>/dev/null || echo "⚠️ pip upgrade failed"
                        
                        echo "📦 Installing selenium..."
                        $PIP_CMD install selenium --user 2>/dev/null || $PIP_CMD install selenium 2>/dev/null || echo "⚠️ selenium install failed"
                        
                        echo "📦 Installing webdriver-manager..."
                        $PIP_CMD install webdriver-manager --user 2>/dev/null || $PIP_CMD install webdriver-manager 2>/dev/null || echo "⚠️ webdriver-manager install failed"
                        
                        echo "📦 Installing additional packages..."
                        $PIP_CMD install requests urllib3 --user 2>/dev/null || $PIP_CMD install requests urllib3 2>/dev/null || echo "⚠️ additional packages install failed"
                        
                    else
                        echo "❌ No pip available for package installation"
                    fi
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    
                    # Verify installation
                    echo "🔍 Verifying installations..."
                    
                    ${PYTHON_PATH} -c "
import sys
import os

# Add user site-packages to path
import site
user_site = site.getusersitepackages()
if user_site not in sys.path:
    sys.path.insert(0, user_site)

selenium_ok = False
webdriver_ok = False
requests_ok = False
smtp_ok = False

try:
    import selenium
    print(f'✅ Selenium {selenium.__version__} available')
    selenium_ok = True
except ImportError as e:
    print(f'❌ Selenium not available: {e}')

try:
    import webdriver_manager
    print('✅ webdriver-manager available')
    webdriver_ok = True
except ImportError as e:
    print(f'❌ webdriver-manager not available: {e}')

try:
    import requests
    print('✅ requests available')
    requests_ok = True
except ImportError as e:
    print(f'❌ requests not available: {e}')

try:
    import smtplib
    print('✅ smtplib (email) available')
    smtp_ok = True
except ImportError as e:
    print(f'❌ smtplib not available: {e}')

if selenium_ok and webdriver_ok and smtp_ok:
    print('🎉 All required packages installed successfully!')
else:
    print('⚠️ Some packages missing, but continuing...')
    
print(f'Python executable: {sys.executable}')
print(f'Python path: {sys.path}')
"
                    
                    # Verify browsers
                    echo "🔍 Checking available browsers:"
                    if command -v google-chrome >/dev/null 2>&1; then
                        echo "✅ Chrome: $(google-chrome --version 2>/dev/null || echo 'installed')"
                    else
                        echo "⚠️ Chrome not found in PATH"
                    fi
                    
                    if command -v firefox-esr >/dev/null 2>&1; then
                        echo "✅ Firefox: $(firefox-esr --version 2>/dev/null || echo 'installed')"
                    else
                        echo "⚠️ Firefox not found in PATH"
                    fi
                    
                    # Check shared memory size
                    echo "💾 Checking shared memory:"
                    df -h /dev/shm 2>/dev/null || echo "⚠️ Could not check /dev/shm"
                    
                    echo "✅ Dependencies installation completed"
                '''
            }
        }
        
        stage('Step 1: Create/Verify Temp Email') {
            steps {
                script {
                    echo "📧 Step 1: Creating temporary email..."
                }
                
                sh '''
                    # Always create new email since workspace was cleaned
                    echo "🆕 Creating new temporary email..."
                    ${PYTHON_PATH} create_email.py
                    
                    if [ $? -eq 0 ]; then
                        echo "✅ Temporary email created successfully"
                    else
                        echo "❌ Failed to create temporary email"
                        exit 1
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "${TEMP_EMAIL_FILE}", allowEmptyArchive: true
                }
            }
        }
        
        // 🛑 MANUAL APPROVAL STAGE - Pipeline pauses here
        stage('⏸️ Manual Approval') {
            steps {
                script {
                    echo "📤 Sending Discord approval notification..."
                    echo "🔗 Using webhook: ${env.DISCORD_WEBHOOK_URL.take(50)}..."
                }
                
                // Send Discord webhook notification
                sh '''
                    echo "🧪 Testing Discord webhook connection..."
                    
                    # Simple test message first
                    RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "$DISCORD_WEBHOOK_URL" \
                      -H "Content-Type: application/json" \
                      -d '{"content": "🚀 Jenkins Pipeline Build #'"$BUILD_NUMBER"' ready for approval!\\n\\n📧 Check the details and approve when ready.", "username": "Jenkins Pipeline"}' 2>/dev/null)
                    
                    if [ $? -eq 0 ]; then
                        HTTP_CODE=$(echo $RESPONSE | tr -d '\\n' | sed -e 's/.*HTTPSTATUS://')
                        echo "Discord webhook response code: $HTTP_CODE"
                        
                        if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
                            echo "✅ Discord notification sent successfully!"
                        else
                            echo "⚠️ Discord returned code $HTTP_CODE"
                        fi
                    else
                        echo "❌ Failed to connect to Discord webhook"
                    fi
                    
                    # If Python script exists, run detailed notification
                    if [ -f "send_approval_webhook.py" ]; then
                        echo "🐍 Running detailed Discord notification..."
                        export NOTIFICATION_TYPE="approval"
                        ${PYTHON_PATH} send_approval_webhook.py || echo "⚠️ Python Discord script had issues"
                    else
                        echo "📝 send_approval_webhook.py not found, using simple notification only"
                    fi
                    
                    echo ""
                    echo "📱 Check your Discord server for the notification!"
                    echo "🔗 Direct approval link: ${BUILD_URL}input/"
                '''
                
                script {
                    echo "⏳ Waiting for manual approval..."
                    echo "📱 Discord notification sent - check your server!"
                    echo "🔗 Direct approval link: ${BUILD_URL}input/"
                    
                    // Display email info
                    if (fileExists("${env.TEMP_EMAIL_FILE}")) {
                        def emailInfo = readFile("${env.TEMP_EMAIL_FILE}")
                        echo "📋 Email Info:"
                        echo "${emailInfo}"
                        
                        // Extract email address for display
                        try {
                            def emailAddress = sh(
                                script: "grep 'EMAIL_ADDRESS=' ${env.TEMP_EMAIL_FILE} | cut -d'=' -f2 || echo 'Not found'",
                                returnStdout: true
                            ).trim()
                            
                            if (emailAddress && emailAddress != 'Not found') {
                                echo "📧 ➤ Temporary email: ${emailAddress}"
                                echo "🌐 ➤ This will be used for website signup"
                                echo "🎯 ➤ Full automation process will begin after approval"
                            }
                        } catch (Exception e) {
                            echo "⚠️ Could not extract email address"
                        }
                    }
                }
                
                // The actual input step with timeout
                timeout(time: 30, unit: 'MINUTES') {
                    script {
                        def userInput = input(
                            id: 'ApprovalStep',
                            message: '📱 Discord notification sent! Check Discord or approve here.',
                            ok: 'OK - Proceed',
                            parameters: [
                                choice(
                                    name: 'APPROVAL_ACTION',
                                    choices: ['FULL_PROCESS', 'SIGNUP_ONLY', 'SKIP_SIGNUP'],
                                    description: 'FULL_PROCESS: All steps | SIGNUP_ONLY: Step 2 only | SKIP_SIGNUP: Steps 3,4,5,6 only'
                                )
                            ]
                        )
                        
                        env.APPROVAL_ACTION = userInput
                        echo "✅ Manual approval received: ${env.APPROVAL_ACTION}"
                        
                        if (env.APPROVAL_ACTION == 'FULL_PROCESS') {
                            echo "🚀 All steps will be executed: signup + message processing + activation + email delivery"
                        } else if (env.APPROVAL_ACTION == 'SIGNUP_ONLY') {
                            echo "🌐 Only website signup will be performed"
                        } else {
                            echo "📬 Only message processing, activation and email will be performed (no signup)"
                        }
                    }
                }
            }
        }
        
        // 🌐 STEP 2: Website Signup
        stage('Step 2: Website Signup') {
            when {
                expression {
                    return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SIGNUP_ONLY']
                }
            }
            
            steps {
                script {
                    echo "🌐 Step 2: Automated website signup..."
                    echo "✅ User approved website signup process"
                }
                
                sh '''
                    echo "🤖 Running automated website signup..."
                    
                    # Update PATH to include user-installed packages
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Verify we have the email file
                    if [ ! -f "${TEMP_EMAIL_FILE}" ]; then
                        echo "❌ No email file found for signup"
                        exit 1
                    fi
                    
                    # Extract email address for display
                    EMAIL_ADDR=$(grep 'EMAIL_ADDRESS=' "${TEMP_EMAIL_FILE}" | cut -d'=' -f2 || echo 'Unknown')
                    echo "📧 Using email for signup: $EMAIL_ADDR"
                    
                    # Run the signup automation
                    echo "🚀 Starting website signup automation..."
                    timeout 600s ${PYTHON_PATH} website_signup.py || {
                        SIGNUP_RESULT=$?
                        echo "⚠️ Website signup returned exit code: $SIGNUP_RESULT"
                        
                        if [ $SIGNUP_RESULT -eq 124 ]; then
                            echo "⏰ Website signup timed out (10 minutes)"
                        elif [ $SIGNUP_RESULT -eq 1 ]; then
                            echo "🔧 Website signup failed - check browser logs"
                        fi
                        
                        echo "💡 Check logs and screenshots for details"
                    }
                    
                    # Display signup info
                    if [ -f "signup_info.json" ]; then
                        echo "📋 Signup Details:"
                        cat signup_info.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat signup_info.json
                    fi
                    
                    echo "✅ Website signup phase completed"
                '''
            }
            
            post {
                always {
                    archiveArtifacts artifacts: "signup_*.json,signup_*.png", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 3: Check for New Messages
        stage('Step 3: Check for New Messages') {
            when {
                expression {
                    return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SKIP_SIGNUP']
                }
            }
            
            steps {
                script {
                    echo "🔍 Step 3: Checking for new messages..."
                }
                
                sh '''
                    echo "📬 Running message checker..."
                    timeout 300s ${PYTHON_PATH} -c "
from check_messages import read_email_info, get_email_messages
email_id, email_address = read_email_info()
if email_id and email_address:
    print(f'📧 Checking messages for: {email_address}')
    messages = get_email_messages(email_id)
    if messages:
        print(f'✅ Found {len(messages)} new messages')
    else:
        print('📭 No new messages found')
else:
    print('❌ Could not read email information')
    exit(1)
"
                    
                    if [ $? -eq 0 ]; then
                        echo "✅ Message check completed successfully"
                    else
                        echo "⚠️ Message check completed with warnings"
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "${MESSAGE_IDS_FILE}", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 4: Get Message Details
        stage('Step 4: Get Message Details') {
            when {
                allOf {
                    expression {
                        return fileExists('message_ids.txt') && 
                               sh(script: "[ -s message_ids.txt ]", returnStatus: true) == 0
                    }
                    expression {
                        return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SKIP_SIGNUP']
                    }
                }
            }
            
            steps {
                script {
                    echo "📖 Step 4: Getting detailed message information..."
                }
                
                sh '''
                    echo "🔍 Processing stored message IDs..."
                    timeout 600s ${PYTHON_PATH} -c "
from get_message_details import read_email_info, read_message_ids, get_all_messages, filter_messages_by_ids, display_message_details, save_message_details
# Read necessary information
email_id = read_email_info()
target_message_ids = read_message_ids()
if not email_id:
    print('❌ Could not read email information')
    exit(1)
if not target_message_ids:
    print('📭 No stored message IDs found')
    exit(0)
print(f'🚀 Processing {len(target_message_ids)} stored message IDs...')
# Get all messages and filter
all_messages = get_all_messages(email_id)
if all_messages is None:
    print('❌ Failed to fetch messages')
    exit(1)
filtered_messages = filter_messages_by_ids(all_messages, target_message_ids)
if not filtered_messages:
    print('📭 No matching messages found')
    exit(0)
print(f'📧 Processing {len(filtered_messages)} matching messages...')
# Process each message automatically
for i, message in enumerate(filtered_messages, 1):
    message_id = message.get('id', f'unknown_{i}')
    print(f'\\n--- Processing Message {i}/{len(filtered_messages)} ---')
    display_message_details(message, i)
    save_message_details(message_id, message)
print(f'✅ Processed all {len(filtered_messages)} messages')
"
                    
                    if [ $? -eq 0 ]; then
                        echo "✅ Message details processing completed successfully"
                    else
                        echo "⚠️ Message details processing completed with warnings"
                    fi
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "message_details_*.json", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 5: Activate Account
        stage('Step 5: Activate Account') {
            when {
                allOf {
                    expression {
                        return fileExists('signup_info.json') && 
                               sh(script: "ls -1 message_details_*.json 2>/dev/null | wc -l", returnStdout: true).trim() != "0"
                    }
                    expression {
                        return env.APPROVAL_ACTION in ['FULL_PROCESS', 'SKIP_SIGNUP']
                    }
                }
            }
            
            steps {
                script {
                    echo "🎯 Step 5: Activating account with confirmation link..."
                }
                
                sh '''
                    echo "🔗 Running account activation..."
                    
                    # Update PATH
                    export PATH="$HOME/.local/bin:$PATH"
                    export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
                    
                    # Check prerequisites
                    if [ ! -f "signup_info.json" ]; then
                        echo "❌ No signup_info.json found"
                        exit 1
                    fi
                    
                    MESSAGE_COUNT=$(ls -1 message_details_*.json 2>/dev/null | wc -l)
                    if [ $MESSAGE_COUNT -eq 0 ]; then
                        echo "❌ No message details found"
                        exit 1
                    fi
                    
                    echo "✅ Found signup info and $MESSAGE_COUNT message files"
                    
                    # Run activation
                    echo "🚀 Starting account activation..."
                    timeout 600s ${PYTHON_PATH} activate_account.py || {
                        ACTIVATION_RESULT=$?
                        echo "⚠️ Account activation returned exit code: $ACTIVATION_RESULT"
                        
                        if [ $ACTIVATION_RESULT -eq 124 ]; then
                            echo "⏰ Account activation timed out"
                        elif [ $ACTIVATION_RESULT -eq 1 ]; then
                            echo "🔧 Activation failed - check logs and screenshots"
                        fi
                    }
                    
                    # Display results
                    if [ -f "user.password.txt" ]; then
                        echo ""
                        echo "👤 FINAL USER CREDENTIALS:"
                        cat user.password.txt
                    fi
                    
                    echo "✅ Account activation phase completed"
                '''
            }
            
            post {
                always {
                    archiveArtifacts artifacts: "activation_*.png,activation_*.json,user.password.txt", allowEmptyArchive: true
                }
            }
        }
        
        // STEP 6: Send Credentials Email
        stage('Step 6: Send Credentials Email') {
            when {
                allOf {
                    expression {
                        return fileExists('user.password.txt')
                    }
                    expression {
                        return env.APPROVAL_ACTION in ['FULL_PROCESS']
                    }
                }
            }
            
            steps {
                script {
                    echo "📧 Step 6: Sending credentials email to matan@yahoo.com..."
                }
                
                sh '''
                    echo "📨 Preparing to send credentials email..."
                    
                    if [ ! -f "user.password.txt" ]; then
                        echo "❌ No user.password.txt found"
                        exit 1
                    fi
                    
                    echo "📋 Credentials file content:"
                    cat user.password.txt
                    echo ""
                    
                    # Run email sender
                    echo "🚀 Starting email delivery..."
                    timeout 120s ${PYTHON_PATH} send_email.py || {
                        EMAIL_RESULT=$?
                        echo "⚠️ Email sending returned exit code: $EMAIL_RESULT"
                        
                        if [ $EMAIL_RESULT -eq 124 ]; then
                            echo "⏰ Email sending timed out"
                        elif [ $EMAIL_RESULT -eq 1 ]; then
                            echo "🔧 Email sending failed"
                        fi
                    }
                    
                    # Display email info
                    if [ -f "email_sent.json" ]; then
                        echo "📋 Email Sending Details:"
                        cat email_sent.json | ${PYTHON_PATH} -m json.tool 2>/dev/null || cat email_sent.json
                    fi
                    
                    echo "✅ Email sending phase completed"
                '''
            }
            
            post {
                always {
                    archiveArtifacts artifacts: "email_sent.json", allowEmptyArchive: true
                }
            }
        }
        
        stage('Generate Summary Report') {
            steps {
                script {
                    echo "📊 Generating complete pipeline summary report..."
                }
                
                sh '''
                    # Create comprehensive summary report
                    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
                    REPORT_FILE="build_${BUILD_NUMBER}_summary_${TIMESTAMP}.txt"
                    
                    echo "=== BUILD ${BUILD_NUMBER} - COMPLETE PIPELINE SUMMARY ===" > "$REPORT_FILE"
                    echo "Timestamp: ${TIMESTAMP}" >> "$REPORT_FILE"
                    echo "Build Date: $(date)" >> "$REPORT_FILE"
                    echo "Build Number: ${BUILD_NUMBER}" >> "$REPORT_FILE"
                    echo "Jenkins Job: ${JOB_NAME}" >> "$REPORT_FILE"
                    echo "Manual Approval: ${APPROVAL_ACTION}" >> "$REPORT_FILE"
                    echo "Environment: Jenkins Docker Container" >> "$REPORT_FILE"
                    echo "Workspace: Fresh start (all previous files cleaned)" >> "$REPORT_FILE"
                    echo "" >> "$REPORT_FILE"
                    
                    # Email info
                    if [ -f "${TEMP_EMAIL_FILE}" ]; then
                        echo "📧 TEMPORARY EMAIL INFO:" >> "$REPORT_FILE"
                        cat "${TEMP_EMAIL_FILE}" >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Final credentials
                    if [ -f "user.password.txt" ]; then
                        echo "" >> "$REPORT_FILE"
                        echo "👤 FINAL USER CREDENTIALS:" >> "$REPORT_FILE"
                        cat user.password.txt >> "$REPORT_FILE"
                        echo "" >> "$REPORT_FILE"
                    fi
                    
                    # Pipeline completion summary
                    echo "" >> "$REPORT_FILE"
                    echo "🎯 PIPELINE COMPLETION SUMMARY:" >> "$REPORT_FILE"
                    if [ -f "signup_info.json" ]; then
                        echo "✅ Step 2: Website signup completed" >> "$REPORT_FILE"
                    else
                        echo "❌ Step 2: Website signup not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "activation_info.json" ]; then
                        echo "✅ Step 5: Account activation completed" >> "$REPORT_FILE"
                    else
                        echo "❌ Step 5: Account activation not completed" >> "$REPORT_FILE"
                    fi
                    
                    if [ -f "email_sent.json" ]; then
                        echo "✅ Step 6: Credentials email sent" >> "$REPORT_FILE"
                    else
                        echo "❌ Step 6: Credentials email not sent" >> "$REPORT_FILE"
                    fi
                    
                    echo "" >> "$REPORT_FILE"
                    echo "=== END BUILD ${BUILD_NUMBER} COMPLETE SUMMARY ===" >> "$REPORT_FILE"
                    
                    echo "📄 Build summary report created: $REPORT_FILE"
                    cat "$REPORT_FILE"
                '''
            }
            
            post {
                success {
                    archiveArtifacts artifacts: "build_*_summary_*.txt", allowEmptyArchive: true
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "🏁 Complete pipeline finished in Docker container"
                
                sh '''
                    echo "🧹 Final cleanup of temporary files..."
                    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
                    find . -name "*.pyc" -delete 2>/dev/null || true
                    rm -rf chrome_*_profile/ firefox_*_profile/ 2>/dev/null || true
                    
                    echo "📁 Final artifact count:"
                    echo "Summary files: $(ls -1 build_${BUILD_NUMBER}_summary_*.txt 2>/dev/null | wc -l)"
                    echo "Signup files: $(ls -1 signup_*.json 2>/dev/null | wc -l)" 
                    echo "Activation files: $(ls -1 activation_*.json 2>/dev/null | wc -l)"
                    echo "Credentials file: $(ls -1 user.password.txt 2>/dev/null | wc -l)"
                    echo "Email logs: $(ls -1 email_sent.json 2>/dev/null | wc -l)"
                    echo "Screenshots: $(ls -1 *.png 2>/dev/null | wc -l)"
                '''
            }
        }
        
        success {
            script {
                echo "✅ Complete pipeline completed successfully in Docker container"
                
                // Send Discord success notification
                sh '''
                    if [ -n "$DISCORD_WEBHOOK_URL" ]; then
                        echo "📱 Sending Discord success notification..."
                        
                        # Read credentials if available
                        CREDENTIALS_PREVIEW=""
                        if [ -f "user.password.txt" ]; then
                            CREDENTIALS_PREVIEW=$(head -5 user.password.txt | sed 's/$/\\n/g' | tr -d '\\n')
                        fi
                        
                        curl -s -X POST "$DISCORD_WEBHOOK_URL" \
                          -H "Content-Type: application/json" \
                          -d '{
                            "username": "Jenkins Success",
                            "embeds": [{
                              "title": "✅ EmbyIL Pipeline Completed Successfully!",
                              "description": "Build #'"$BUILD_NUMBER"' has finished successfully",
                              "color": 65280,
                              "fields": [
                                {
                                  "name": "🎉 Status",
                                  "value": "All steps completed successfully!",
                                  "inline": false
                                },
                                {
                                  "name": "📧 Final Step",
                                  "value": "Credentials emailed to matan@yahoo.com",
                                  "inline": false
                                }
                              ],
                              "footer": {
                                "text": "Jenkins Pipeline Bot"
                              },
                              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'"
                            }]
                          }' || echo "Discord success notification failed"
                    fi
                '''
                
                if (env.APPROVAL_ACTION == 'FULL_PROCESS') {
                    echo "🎉 All steps completed: signup + message processing + activation + email delivery"
                    if (fileExists('email_sent.json')) {
                        echo "📨 Credentials successfully emailed to matan@yahoo.com!"
                    }
                    if (fileExists('user.password.txt')) {
                        echo "📄 Final credentials available in archived user.password.txt"
                    }
                }
                
                echo "📊 Check archived artifacts for detailed results"
                echo "🎯 Fresh workspace guaranteed for next run!"
            }
        }
        
        failure {
            script {
                echo "❌ Pipeline failed in Docker container"
                
                // Send Discord failure notification  
                sh '''
                    if [ -n "$DISCORD_WEBHOOK_URL" ]; then
                        echo "📱 Sending Discord failure notification..."
                        curl -s -X POST "$DISCORD_WEBHOOK_URL" \
                          -H "Content-Type: application/json" \
                          -d '{
                            "username": "Jenkins Failure",
                            "embeds": [{
                              "title": "❌ EmbyIL Pipeline Failed",
                              "description": "Build #'"$BUILD_NUMBER"' encountered an error",
                              "color": 16711680,
                              "fields": [
                                {
                                  "name": "🔗 Build Details",
                                  "value": "[View Build]('"$BUILD_URL"')",
                                  "inline": false
                                }
                              ],
                              "footer": {
                                "text": "Jenkins Pipeline Bot"
                              },
                              "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"'"
                            }]
                          }' || echo "Discord failure notification failed"
                    fi
                '''
            }
        }
        
        unstable {
            script {
                echo "⚠️ Pipeline completed with warnings"
            }
        }
        
        aborted {
            script {
                echo "🛑 Pipeline was aborted (possibly during manual approval)"
            }
        }
    }
}
